import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useCompraCanEdit } from "@/hooks/useCompras";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { cn } from "@/lib/utils";
import { zodResolver } from "@hookform/resolvers/zod";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";
import { Calculator, CalendarIcon, Package, User } from "lucide-react";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";

const compraSchema = z.object({
  fornecedorId: z.string().min(1, "Selecione um fornecedor"),
  dataCompra: z.date({
    message: "Data da compra é obrigatória",
  }),
  quantidade: z.number().min(0.1, "Quantidade deve ser maior que 0"),
  precoArroba: z.number().min(0.01, "Preço por arroba deve ser maior que 0"),
  qualidade: z.string().min(1, "Selecione a qualidade"),
  observacoes: z.string().optional(),
  necessitaAprovacao: z.boolean().default(false),
  umidade: z.number().min(0).max(100, "Umidade deve estar entre 0 e 100%"),
});

type CompraFormData = z.infer<typeof compraSchema>;

interface CompraFormProps {
  compra?: any;
  onSubmit: (data: CompraFormData) => void;
  onCancel: () => void;
  fornecedores: Array<{ id: string; nome: string }>;
}

export default function CompraForm({
  compra,
  onSubmit,
  onCancel,
  fornecedores,
}: CompraFormProps) {
  const [date, setDate] = useState<Date | undefined>(
    compra?.dataCompra || undefined
  );

  // Verificar se a compra pode ser editada (não tem pagamentos)
  const canEditAll = useCompraCanEdit(compra);
  const isEdit = !!compra;

  const {
    register,
    handleSubmit,
    watch,
    setValue,
    formState: { errors, isSubmitting },
  } = useForm<CompraFormData>({
    resolver: zodResolver(compraSchema),
    defaultValues: compra
      ? {
          ...compra,
          dataCompra: compra.dataCompra
            ? new Date(compra.dataCompra)
            : undefined,
        }
      : {
          necessitaAprovacao: false,
        },
  });

  const quantidade = watch("quantidade");
  const precoArroba = watch("precoArroba");
  const precoKg = precoArroba / 15; // 1 arroba = 15 kg
  const valorTotal = quantidade && precoArroba ? quantidade * precoKg : 0;

  const handleDateSelect = (selectedDate: Date | undefined) => {
    setDate(selectedDate);
    setValue("dataCompra", selectedDate as Date);
  };

  const onFormSubmit = (data: CompraFormData) => {
    // Determina se precisa de aprovação baseado no valor
    console.log(data);
    const needsApproval = valorTotal > 5000;
    onSubmit({
      ...data,
      necessitaAprovacao: needsApproval,
    });
  };

  return (
    <form onSubmit={handleSubmit(onFormSubmit)} className="space-y-6">
      {/* Informações Básicas */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <User className="h-5 w-5" />
            Informações da Compra
          </CardTitle>
        </CardHeader>
        <CardContent className="bg-white space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="fornecedorId">Fornecedor *</Label>
              <Select
                value={watch("fornecedorId")}
                onValueChange={(value) => setValue("fornecedorId", value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Selecione o fornecedor" />
                </SelectTrigger>
                <SelectContent className="bg-white">
                  {fornecedores.map((fornecedor) => (
                    <SelectItem key={fornecedor.id} value={fornecedor.id}>
                      {fornecedor.nome}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {errors.fornecedorId && (
                <p className="text-sm text-red-500">
                  {errors.fornecedorId.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label>Data da Compra *</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className={cn(
                      "w-full justify-start text-left font-normal",
                      !date && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {date
                      ? format(date, "PPP", { locale: ptBR })
                      : "Selecione a data"}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="bg-white w-auto p-0">
                  <Calendar
                    mode="single"
                    selected={date}
                    onSelect={handleDateSelect}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
              {errors.dataCompra && (
                <p className="text-sm text-red-500">
                  {errors.dataCompra.message}
                </p>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Quantidade e Preço */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Package className="h-5 w-5" />
            Quantidade e Valores
          </CardTitle>
        </CardHeader>
        <CardContent className="bg-white space-y-4">
          <div className="grid grid-cols-4 gap-4">
            <div className="space-y-2">
              <Label htmlFor="quantidade">Quantidade (kg) *</Label>
              <Input
                id="quantidade"
                type="number"
                step="0.1"
                placeholder="0.0"
                disabled={isEdit && !canEditAll}
                {...register("quantidade", { valueAsNumber: true })}
              />
              {errors.quantidade && (
                <p className="text-sm text-red-500">
                  {errors.quantidade.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="precoArroba">Preço por Arroba (R$) *</Label>
              <Input
                id="precoArroba"
                type="number"
                step="0.01"
                placeholder="0.00"
                {...register("precoArroba", { valueAsNumber: true })}
              />
              {errors.precoArroba && (
                <p className="text-sm text-red-500">{errors.precoArroba.message}</p>
              )}
            </div>

            <div className="space-y-2">
              <Label>Preço por Kg (R$)</Label>
              <div className="flex items-center h-10 px-3 py-2 border border-input bg-muted rounded-md">
                <span className="font-medium">
                  R$ {precoKg.toFixed(2)}
                </span>
              </div>
            </div>

            <div className="space-y-2">
              <Label>Valor Total</Label>
              <div className="flex items-center h-10 px-3 py-2 border border-input bg-muted rounded-md">
                <Calculator className="h-4 w-4 mr-2 text-muted-foreground" />
                <span className="font-medium">
                  R${" "}
                  {valorTotal.toLocaleString("pt-BR", {
                    minimumFractionDigits: 2,
                  })}
                </span>
              </div>
              {valorTotal > 5000 && (
                <Badge
                  variant="outline"
                  className="text-orange-600 border-orange-200"
                >
                  Requer aprovação
                </Badge>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Qualidade */}
      <Card>
        <CardHeader>
          <CardTitle>Controle de Qualidade</CardTitle>
        </CardHeader>
        <CardContent className="bg-white space-y-4">
          <div className="grid grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="qualidade">Classificação *</Label>
              <Select
                value={watch("qualidade")}
                onValueChange={(value) => setValue("qualidade", value as any)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Selecione a qualidade" />
                </SelectTrigger>
                <SelectContent className="bg-white">
                  <SelectItem value="premium">Premium</SelectItem>
                  <SelectItem value="especial">Especial</SelectItem>
                  <SelectItem value="comercial">Comercial</SelectItem>
                  <SelectItem value="industrial">Industrial</SelectItem>
                </SelectContent>
              </Select>
              {errors.qualidade && (
                <p className="text-sm text-red-500">
                  {errors.qualidade.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="umidade">Umidade (%) *</Label>
              <Input
                id="umidade"
                type="number"
                step="0.1"
                min="0"
                max="100"
                placeholder="0.0"
                {...register("umidade", { valueAsNumber: true })}
              />
              {errors.umidade && (
                <p className="text-sm text-red-500">{errors.umidade.message}</p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="fermentacao">Fermentação *</Label>
              <Select
                value={watch("fermentacao")}
                onValueChange={(value) => setValue("fermentacao", value as any)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Avalie a fermentação" />
                </SelectTrigger>
                <SelectContent className="bg-white">
                  <SelectItem value="excelente">Excelente</SelectItem>
                  <SelectItem value="boa">Boa</SelectItem>
                  <SelectItem value="regular">Regular</SelectItem>
                  <SelectItem value="ruim">Ruim</SelectItem>
                </SelectContent>
              </Select>
              {errors.fermentacao && (
                <p className="text-sm text-red-500">
                  {errors.fermentacao.message}
                </p>
              )}
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="observacoes">Observações</Label>
            <Textarea
              id="observacoes"
              placeholder="Observações sobre a qualidade, condições de transporte, etc."
              rows={3}
              {...register("observacoes")}
            />
          </div>
        </CardContent>
      </Card>

      {/* Botões de Ação */}
      <div className="flex justify-end gap-3">
        <Button type="button" variant="outline" onClick={onCancel}>
          Cancelar
        </Button>
        <Button type="submit" disabled={isSubmitting}>
          {isSubmitting ? "Salvando..." : compra ? "Atualizar" : "Cadastrar"}{" "}
          Compra
        </Button>
      </div>
    </form>
  );
}
